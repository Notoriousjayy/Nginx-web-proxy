name: Deploy to EKS from ECR (Vault)

on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # required for Vault JWT/OIDC
  contents: read

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VAULT_ADDR: ${{ vars.VAULT_ADDR }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # ─────────────────────────────────────────────────────────────────────────
      # Install kubectl (latest stable)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      # ─────────────────────────────────────────────────────────────────────────
      # Install Helm (latest stable)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Install Helm
        run: |
          VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest \
            | grep '"tag_name":' | head -1 | cut -d '"' -f4)
          curl -LO "https://get.helm.sh/helm-${VERSION}-linux-amd64.tar.gz"
          tar -zxvf helm-${VERSION}-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version

      # ─────────────────────────────────────────────────────────────────────────
      # 1) Read deploy config from Vault (KV)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Read deploy config from Vault (KV)
        id: vault-kv
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          role: ${{ secrets.VAULT_GITHUB_ROLE }}
          exportToken: true
          secrets: |
            kv/data/deploy EKS_CLUSTER_NAME | EKS_CLUSTER_NAME ;
            kv/data/deploy AWS_REGION       | AWS_REGION ;
            kv/data/deploy K8S_NAMESPACE    | K8S_NAMESPACE | default ;
            kv/data/deploy ECR_REPOSITORY   | ECR_REPOSITORY ;
            kv/data/deploy IMAGE_TAG        | IMAGE_TAG |

      # ─────────────────────────────────────────────────────────────────────────
      # 2) Get temporary AWS creds from Vault (AWS Engine)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Get temporary AWS creds from Vault (AWS engine)
        id: vault-aws
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          method: jwt
          role: ${{ secrets.VAULT_GITHUB_ROLE }}
          exportEnv: true
          secrets: |
            aws/creds/ecr-ro access_key    | AWS_ACCESS_KEY_ID ;
            aws/creds/ecr-ro secret_key    | AWS_SECRET_ACCESS_KEY ;
            aws/creds/ecr-ro security_token| AWS_SESSION_TOKEN

      # ─────────────────────────────────────────────────────────────────────────
      # Compute registry/account, update kubeconfig
      # ─────────────────────────────────────────────────────────────────────────
      - name: Configure AWS & kubeconfig
        shell: bash
        run: |
          set -euo pipefail
          echo "AWS_REGION=${AWS_REGION:-us-east-1}" >> $GITHUB_ENV
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com" >> $GITHUB_ENV
          aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"

      # ─────────────────────────────────────────────────────────────────────────
      # Determine image tag (latest if not provided)
      # ─────────────────────────────────────────────────────────────────────────
      - name: Determine image tag
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${IMAGE_TAG:-}" && "${IMAGE_TAG}" != "null" ]]; then
            echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          else
            TAG=$(aws ecr describe-images --repository-name "$ECR_REPOSITORY" \
              --query 'reverse(sort_by(imageDetails,& imagePushedAt))[0].imageTags[0]' --output text)
            echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          fi
          echo "Using $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}"

      # ─────────────────────────────────────────────────────────────────────────
      # Ensure ECR image-pull secret
      # ─────────────────────────────────────────────────────────────────────────
      - name: Ensure ECR pull secret (ecr-regcred)
        run: |
          set -euo pipefail
          NS="${K8S_NAMESPACE:-default}"
          aws ecr get-login-password --region "$AWS_REGION" \
            | kubectl create secret docker-registry ecr-regcred \
                --namespace "$NS" \
                --docker-server="$ECR_REGISTRY" \
                --docker-username=AWS \
                --docker-password-stdin \
                --dry-run=client -o yaml \
            | kubectl apply -f -

      # ─────────────────────────────────────────────────────────────────────────
      # Helm upgrade/install
      # ─────────────────────────────────────────────────────────────────────────
      - name: Deploy with Helm
        run: |
          set -euo pipefail
          NS="${K8S_NAMESPACE:-default}"
          helm upgrade --install react-app ./chart \
            --namespace "$NS" \
            --create-namespace=false \
            --set image.repository="${ECR_REGISTRY}/${ECR_REPOSITORY}" \
            --set image.tag="${IMAGE_TAG}"

      # ─────────────────────────────────────────────────────────────────────────
      # Wait for rollout
      # ─────────────────────────────────────────────────────────────────────────
      - name: Wait for rollout
        run: |
          NS="${K8S_NAMESPACE:-default}"
          kubectl rollout status deploy/react-app-react-app -n "$NS" --timeout=5m
